@prefix ex: <http://example.org/> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

ex: a owl:Ontology ;
    rdfs:label "Mentor SHACL Test Ontology" ;
    rdfs:comment "An ontology built from the W3C SHACL specification examples." ;
    rdfs:seeAlso <https://www.w3.org/TR/shacl/> .

# Both a class and a node shape.
ex:Person a rdfs:Class, sh:NodeShape .

# An explicit node shape.
ex:PersonShape a sh:NodeShape ;
	sh:targetClass ex:Person .

# An implicit node shape.
ex:CustomerShape sh:targetClass ex:Customer .

# An explicit property shape.
ex:ExamplePropertyShape
	a sh:PropertyShape ;
	sh:path ex:email ;
	sh:description "We need at least one email value" ;
	sh:minCount 1 .

# An explicit node shape with an implicit property shape.
ex:InvoiceShape	a sh:NodeShape ;
	sh:property [
		sh:path ex:customer ;
		sh:class ex:Customer ;
		sh:class ex:Person ;
	] .

ex:customer a rdf:Property .

ex:PatternConstraintComponent
	a sh:ConstraintComponent ;
	sh:parameter [
		sh:path sh:pattern ;
	] ;
	sh:parameter [
		sh:path sh:flags ;
		sh:optional true ;
	] ;
	sh:validator ex:hasPattern .

ex:hasPattern
	a sh:SPARQLAskValidator ;
	sh:message "Value does not match pattern {$pattern}" ;
	sh:ask """
		ASK { 
			FILTER (!isBlank($value) && 
				IF(bound($flags), regex(str($value), $pattern, $flags), regex(str($value), $pattern)))
		}""" .